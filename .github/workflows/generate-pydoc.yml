# .github/workflows/generate-pydoc.yml
name: Projecte Django ‚Äì Oriol Torra

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Clona el repositori
        uses: actions/checkout@v3

      - name: Configura Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Instal¬∑la Django
        run: |
          python -m pip install --upgrade pip
          pip install Django

      - name: Aplica migracions i executa tests
        run: |
          python manage.py migrate
          python manage.py test

      - name: Genera documentaci√≥ amb Pydoc
        env:
          DJANGO_SETTINGS_MODULE: my_site.settings
          PYTHONPATH: ${{ github.workspace }}
        run: |
          python - <<'EOF'
          import os, django, pydoc

          # 1) Configura Django
          os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_site.settings')
          django.setup()

          # 2) Crea carpeta de destinaci√≥
          docs_dir = os.path.join(os.getcwd(), 'docs')
          os.makedirs(docs_dir, exist_ok=True)

          # 3) Rec√≥rrer fitxers .py i generar docs
          for root, dirs, files in os.walk('.'):
              # Saltem venv i migrations
              if 'venv' in root or 'migrations' in root:
                  continue
              for filename in files:
                  if not filename.endswith('.py'):
                      continue
                  filepath = os.path.join(root, filename)
                  # Construeix nom de m√≤dul Python: elimina './' i '.py', canvia '/' per '.'
                  module = filepath[2:-3].replace(os.sep, '.')
                  print(f"Generant doc per {module}")
                  try:
                      pydoc.writedoc(module)
                  except Exception as e:
                      print(f"  ‚ö†Ô∏è Error amb {module}: {e}")

          # 4) Mou tots els .html generats a docs/
          for f in os.listdir('.'):
              if f.endswith('.html'):
                  os.replace(f, os.path.join(docs_dir, f))

          # 5) Crea index.html amb enlla√ßos
          index = os.path.join(docs_dir, 'index.html')
          with open(index, 'w', encoding='utf-8') as idx:
              idx.write('# üìö Documentaci√≥ Pydoc\n\n')
              for html in sorted(os.listdir(docs_dir)):
                  if html == 'index.html':
                      continue
                  idx.write(f'- [{html}]({html})\n')
          EOF

      - name: Publica a GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: docs

      - name: Actualitza README.md amb enlla√ß
        run: |
          LINK="[üìö Documentaci√≥ Pydoc](https://OriolTorraTudela.github.io/Projecte-Final_Django/)"
          if ! grep -q "Documentaci√≥ Pydoc" README.md; then
            echo -e "\n$LINK" >> README.md
            git config --global user.name "github-actions"
            git config --global user.email "github-actions@github.com"
            git add README.md
            git commit -m "Afegit enlla√ß a la documentaci√≥ Pydoc"
            git push origin main
          fi
