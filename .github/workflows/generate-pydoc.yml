name: Genera Pydoc i publica GH-Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Clona el repositori
        uses: actions/checkout@v3

      - name: Configura Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Instal·la dependències
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Aplica migracions i tests
        run: |
          python manage.py migrate
          python manage.py test

      - name: Genera documentació amb Pydoc
        env:
          DJANGO_SETTINGS_MODULE: my_site.settings    # ← ajusta-ho
          PYTHONPATH: ${{ github.workspace }}
        run: |
          mkdir -p docs
          python - <<EOF
import os
import django
import pydoc

# Carrega Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "my_site.settings")
django.setup()

# Carpeta target
docs_dir = os.path.join(os.getcwd(), "docs")
os.makedirs(docs_dir, exist_ok=True)

# Mòduls a documentar
modules = [
    "blog.models",
    "blog.views",
    "blog.urls",
    "blog.admin",
    "blog.tests",
]

# Genera cada HTML
for mod in modules:
    print(f"– Generant doc per {mod}")
    pydoc.writedoc(mod)
    src = f"{mod}.html"
    dst = os.path.join(docs_dir, mod.split(".")[1] + ".html")
    if os.path.exists(src):
        os.replace(src, dst)
    else:
        print(f"⚠️ No trobat {src}")

# Documenta el paquet arrel
print("– Generant doc per paquet blog")
pydoc.writedoc("blog")
if os.path.exists("blog.html"):
    os.replace("blog.html", os.path.join(docs_dir, "index.html"))
EOF

      - name: Publica a GitHub Pages (gh-pages)
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: docs
